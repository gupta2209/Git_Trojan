// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="add,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.220000,HLS_SYN_LAT=34,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=256,HLS_SYN_LUT=138}" *)

module add (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_q0,
        sum,
        ap_return,
        trigger_in
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] array_r_address0;
output   array_r_ce0;
input  [31:0] array_r_q0;
input  [31:0] sum;
input [0:0] trigger_in;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg array_r_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] i_cast2_fu_93_p1;
reg   [31:0] i_cast2_reg_133;
wire    ap_CS_fsm_state2;
wire   [3:0] i_1_fu_104_p2;
reg   [3:0] i_1_reg_141;
wire   [0:0] exitcond1_fu_98_p2;
wire   [3:0] i_2_fu_121_p2;
reg   [3:0] i_2_reg_154;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_115_p2;
wire   [31:0] sum_assign_fu_127_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] array1_address0;
reg    array1_ce0;
reg    array1_we0;
wire   [31:0] array1_q0;
reg   [3:0] i_reg_59;
wire    ap_CS_fsm_state3;
reg   [31:0] p_0_reg_70;
reg   [3:0] i1_reg_82;
wire   [31:0] i1_cast1_fu_110_p1;
reg   [4:0] ap_NS_fsm;
reg [31:0] reg1;
wire [31:0] reg_out;
wire [31:0] mux_out;
wire [31:0] mux_out_neg;
wire [0:0] temp1;
wire [0:0] temp2;
wire [0:0] temp12;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

add_array1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
array1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(array1_address0),
    .ce0(array1_ce0),
    .we0(array1_we0),
    .d0(array_r_q0),
    .q0(array1_q0)
);
                                                                                                              
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;                                                                         			
    end else begin		
        ap_CS_fsm <= ap_NS_fsm;	
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_98_p2 == 1'd1))) begin
        i1_reg_82 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_reg_82 <= i_2_reg_154;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_59 <= i_1_reg_141;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_59 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_98_p2 == 1'd1))) begin
        p_0_reg_70 <= 32'd0;
        reg1 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_0_reg_70 <= sum_assign_fu_127_p2;
    end else if ((1'b1 == ap_CS_fsm_state3) & (trigger_in == 1'b1)) begin
    	reg1 <= mux_out_neg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_141 <= i_1_fu_104_p2;
        i_cast2_reg_133[3 : 0] <= i_cast2_fu_93_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_2_reg_154 <= i_2_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_115_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_115_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        array1_address0 = i1_cast1_fu_110_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        array1_address0 = i_cast2_reg_133;
    end else begin
        array1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        array1_ce0 = 1'b1;
    end else begin
        array1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        array1_we0 = 1'b1;
    end else begin
        array1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_98_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_115_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign mux_out_neg = ~mux_out;

assign reg_out = reg1;

assign temp1 = (trigger_in == 1'b1)? 1'b1 : 1'b0;
assign temp2 = (1'b1 == ap_CS_fsm_state3)? 1'b1 : 1'b0;
assign temp12 = temp1 & temp2;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = p_0_reg_70;

assign array_r_address0 = i_cast2_fu_93_p1;

assign exitcond1_fu_98_p2 = ((i_reg_59 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_115_p2 = ((i1_reg_82 == 4'd8) ? 1'b1 : 1'b0);

assign i1_cast1_fu_110_p1 = i1_reg_82;

assign i_1_fu_104_p2 = (i_reg_59 + 4'd1);

assign i_2_fu_121_p2 = (i1_reg_82 + 4'd1);

assign i_cast2_fu_93_p1 = i_reg_59;

assign mux_out = (temp12 == 1'b1) ? reg_out : array1_q0;

assign sum_assign_fu_127_p2 = (mux_out + p_0_reg_70);  //replace array1_q0 with mux_out

always @ (posedge ap_clk) begin
    i_cast2_reg_133[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //add
