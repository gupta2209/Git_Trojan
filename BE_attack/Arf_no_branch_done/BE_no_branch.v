// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_macc,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.981500,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=60,HLS_SYN_FF=3764,HLS_SYN_LUT=1293}" *)

module hls_macc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i1,
        i2,
        i3,
        i4,
        i5,
        i6,
        o1,
        o1_ap_vld,
        o2,
        o2_ap_vld,
        o3,
        o3_ap_vld,
        o4,
        o4_ap_vld,
        G1,
        G2,
        G3,
        G4,
        GG1,
        GG2,
        ap_return1,
        ap_return1_ap_vld,
        trigger_in
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i1;
input  [31:0] i2;
input  [31:0] i3;
input  [31:0] i4;
input  [31:0] i5;
input  [31:0] i6;
output  [31:0] o1;
output   o1_ap_vld;
output  [31:0] o2;
output   o2_ap_vld;
output  [31:0] o3;
output   o3_ap_vld;
output  [31:0] o4;
output   o4_ap_vld;
input  [31:0] G1;
input  [31:0] G2;
input  [31:0] G3;
input  [31:0] G4;
input  [31:0] GG1;
input  [31:0] GG2;
input [0:0] trigger_in;
output  [31:0] ap_return1;
output   ap_return1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg o1_ap_vld;
reg o2_ap_vld;
reg o3_ap_vld;
reg o4_ap_vld;
reg ap_return1_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_139_p2;
reg   [31:0] op5_reg_313;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_145_p2;
reg   [31:0] op6_reg_318;
wire   [31:0] grp_fu_151_p2;
reg   [31:0] op7_reg_323;
wire   [31:0] grp_fu_157_p2;
reg   [31:0] op8_reg_328;
wire  signed [31:0] op13_fu_168_p2;
reg  signed [31:0] op13_reg_333;
wire    ap_CS_fsm_state3;
wire  signed [31:0] op14_fu_178_p2;
reg  signed [31:0] op14_reg_341;
wire  signed [31:0] grp_fu_183_p2;
reg  signed [31:0] tmp7_reg_349;
wire    ap_CS_fsm_state5;
wire  signed [31:0] grp_fu_187_p2;
reg  signed [31:0] tmp8_reg_354;
wire   [31:0] grp_fu_191_p2;
reg   [31:0] op17_reg_359;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_195_p2;
reg   [31:0] op18_reg_364;
wire  signed [31:0] grp_fu_199_p2;
reg  signed [31:0] op19_reg_369;
wire    ap_CS_fsm_state7;
wire  signed [31:0] op20_fu_203_p2;
reg  signed [31:0] op20_reg_375;
wire    ap_CS_fsm_state8;
wire  signed [31:0] tmp_fu_227_p2;
reg  signed [31:0] tmp_reg_401;
wire  signed [31:0] tmp2_fu_232_p2;
reg  signed [31:0] tmp2_reg_406;
wire   [31:0] grp_fu_207_p2;
reg   [31:0] op1_reg_411;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_213_p2;
reg   [31:0] op2_reg_416;
wire   [31:0] grp_fu_219_p2;
reg   [31:0] op21_reg_421;
wire   [31:0] grp_fu_223_p2;
reg   [31:0] op22_reg_426;
wire   [31:0] grp_fu_237_p2;
reg   [31:0] tmp1_reg_431;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_241_p2;
reg   [31:0] tmp3_reg_436;
wire   [31:0] tmp11_fu_260_p2;
reg   [31:0] tmp11_reg_441;
wire   [31:0] op27_fu_253_p2;
wire    ap_CS_fsm_state11;
wire   [31:0] op28_fu_265_p2;
wire   [31:0] tmp4_fu_163_p2;
wire   [31:0] tmp5_fu_173_p2;
wire    ap_CS_fsm_state4;
wire  signed [31:0] tmp_fu_227_p1;
wire  signed [31:0] tmp2_fu_232_p1;
wire   [31:0] tmp9_fu_249_p2;
wire   [31:0] tmp6_fu_245_p2;
wire   [31:0] tmp10_fu_270_p2;
reg   [10:0] ap_NS_fsm;
reg [31:0] reg1;
wire [31:0] reg_out1;
wire [31:0] mux_out1;
wire [31:0] mux_out_neg1;
reg [31:0] reg2;
wire [31:0] reg_out2;
wire [31:0] mux_out2;
wire [31:0] mux_out_neg2;
wire [0:0] temp1;
wire [0:0] temp2;
wire [0:0] temp12;


// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        op13_reg_333 <= op13_fu_168_p2;
        op14_reg_341 <= op14_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        op17_reg_359 <= grp_fu_191_p2;
        op18_reg_364 <= grp_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        reg1 <= 1'b0;
        reg2 <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        op19_reg_369 <= grp_fu_199_p2;
        op20_reg_375 <= op20_fu_203_p2;
    end else if ((1'b1 == ap_CS_fsm_state4) & (trigger_in == 1'b1)) begin
    	reg1 <= mux_out_neg1;
    	reg2 <= mux_out_neg2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        op1_reg_411 <= grp_fu_207_p2;
        op21_reg_421 <= grp_fu_219_p2;
        op22_reg_426 <= grp_fu_223_p2;
        op2_reg_416 <= grp_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        op5_reg_313 <= grp_fu_139_p2;
        op6_reg_318 <= grp_fu_145_p2;
        op7_reg_323 <= grp_fu_151_p2;
        op8_reg_328 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp11_reg_441 <= tmp11_fu_260_p2;
        tmp1_reg_431 <= grp_fu_237_p2;
        tmp3_reg_436 <= grp_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp2_reg_406 <= tmp2_fu_232_p2;
        tmp_reg_401 <= tmp_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp7_reg_349 <= grp_fu_183_p2;
        tmp8_reg_354 <= grp_fu_187_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_return1_ap_vld = 1'b1;
    end else begin
        ap_return1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        o1_ap_vld = 1'b1;
    end else begin
        o1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        o2_ap_vld = 1'b1;
    end else begin
        o2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        o3_ap_vld = 1'b1;
    end else begin
        o3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        o4_ap_vld = 1'b1;
    end else begin
        o4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign mux_out_neg1 = ~mux_out1;

assign reg_out1 = reg1;

assign mux_out_neg2 = ~mux_out2;

assign reg_out2 = reg2;

assign temp1 = (trigger_in == 1'b1)? 1'b1 : 1'b0;
assign temp2 = (1'b1 == ap_CS_fsm_state4)? 1'b1 : 1'b0;
assign temp12 = temp1 & temp2;

assign mux_out1 = (temp12 == 1'b1) ? reg_out1 : tmp8_reg_354; //state 4

assign mux_out2 = (temp12 == 1'b1) ? reg_out2 : op17_reg_359; //state 4

assign grp_fu_199_p2 = mux_out1 * tmp7_reg_349;

assign op20_fu_203_p2 = (mux_out2 + op18_reg_364);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_139_p2 = G1 * i3;

assign grp_fu_145_p2 = G2 * i4;

assign grp_fu_151_p2 = G1 * i4;

assign grp_fu_157_p2 = G2 * i3;

assign grp_fu_183_p2 = op14_reg_341 * G1;

assign grp_fu_187_p2 = op13_reg_333 * G2;

assign grp_fu_191_p2 = op13_reg_333 * G1;

assign grp_fu_195_p2 = op14_reg_341 * G2;

//assign grp_fu_199_p2 = tmp8_reg_354 * tmp7_reg_349;

assign grp_fu_207_p2 = GG1 * i1;

assign grp_fu_213_p2 = GG2 * i2;

assign grp_fu_219_p2 = op20_reg_375 * G1;

assign grp_fu_223_p2 = op19_reg_369 * G2;

assign grp_fu_237_p2 = tmp_reg_401 * G2;

assign grp_fu_241_p2 = tmp2_reg_406 * G1;

assign ap_return1 = (tmp11_reg_441 + tmp10_fu_270_p2);

assign o1 = op13_reg_333;

assign o2 = op14_reg_341;

assign o3 = op27_fu_253_p2;

assign o4 = op28_fu_265_p2;

assign op13_fu_168_p2 = (tmp4_fu_163_p2 + op5_reg_313);

assign op14_fu_178_p2 = (tmp5_fu_173_p2 + op7_reg_323);

//assign op20_fu_203_p2 = (op17_reg_359 + op18_reg_364);

assign op27_fu_253_p2 = (tmp9_fu_249_p2 + tmp6_fu_245_p2);

assign op28_fu_265_p2 = (tmp3_reg_436 + tmp1_reg_431);

assign tmp10_fu_270_p2 = ($signed(op13_reg_333) + $signed(op28_fu_265_p2));

assign tmp11_fu_260_p2 = ($signed(op14_reg_341) + $signed(op27_fu_253_p2));

assign tmp2_fu_232_p1 = i2;

assign tmp2_fu_232_p2 = ($signed(op19_reg_369) + $signed(tmp2_fu_232_p1));

assign tmp4_fu_163_p2 = (op6_reg_318 + i5);

assign tmp5_fu_173_p2 = (op8_reg_328 + i6);

assign tmp6_fu_245_p2 = (op1_reg_411 + op22_reg_426);

assign tmp9_fu_249_p2 = (op2_reg_416 + op21_reg_421);

assign tmp_fu_227_p1 = i1;

assign tmp_fu_227_p2 = ($signed(op20_reg_375) + $signed(tmp_fu_227_p1));

endmodule //hls_macc
